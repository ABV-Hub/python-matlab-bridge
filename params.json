{"name":"Python-matlab-bridge","tagline":"A simple Python => MATLAB(R) interface and a matlab_magic for ipython","body":"# Python-MATLAB(R) Bridge and ipython matlab_magic\r\n\r\nA python interface to call out to [Matlab(R)](http://mathworks.com). Original\r\nimplementation by [Max Jaderberg](http://www.maxjaderberg.com/).\r\n\r\nThis implementation also includes an [ipython](http://ipython.org) matlab_magic\r\nextension, which provides a much simplified interface for weaving python and\r\nMatlab code together.  \r\n\r\n\r\n***AT PRESENT THIS MAY NOT WORK ON WINDOWS; BETA TESTERS WANTED ***\r\n\r\n## Usage\r\n\r\nFor examples, check out the `.ipynb` files\r\n\r\n## Installation\r\n\r\nTo install from the source-code. Download the [code zip\r\nfile](https://github.com/arokem/python-matlab-bridge/archive/master.zip). Unzip\r\nit somewhere on your machine and then issue:\r\n\r\n    python setup.py install\r\n\r\nThis should make the python-matlab-bridge import-able.\r\n\r\nAlternatively, you can get pymatbridge at the\r\n[cheese-shop](https://pypi.python.org/pypi/pymatbridge).\r\n\r\nThis means that you can use:\r\n\r\n    easy_install pymatbridge\r\n\r\nOr\r\n\r\n    pip install pymatbridge\r\n\r\nTo get things going.\r\n\r\n\r\n### API: \r\n\r\nInitialize the Matlab class:\r\n\r\n    from pymatbridge import Matlab\r\n    mlab = Matlab()\r\n\r\nBy default the matlab executable is whatever gets called when you type `matlab`\r\nin your terminal, the host is localhost and the port is a random unused port.\r\n\r\nYou can specify these in the following manner: \r\n\r\n    mlab = Matlab(matlab='/Applications/MATLAB_R2011a.app/bin/matlab',\r\n                    host='192.168.0.1', port=5151)\r\n\r\nAlternatively, if `matlab` is not recognized in the command-line, you can\r\ncreate a [symlink](http://en.wikipedia.org/wiki/Symbolic_link) to it's\r\nlocation. For example:\r\n\r\n\t  ln -s /Applications/MATLAB_R2012b.app/bin/matlab ~/bin/matlab\r\n\r\nMaking sure that your ~/bin directory is on your bash PATH variable.\r\n\t  \r\nYou can then start the MATLAB server:\r\n\r\n    mlab.start()\r\n\r\nwhich will return True once connected.\r\n\r\nYou can then run any local MATLAB function contained within a .m file of the\r\nsame name. For example, to call the function jk in jk.m:\r\n\r\n    %% MATLAB\r\n    function lol = jk(args)\r\n        arg1 = args.arg1;\r\n        arg2 = args.arg2;\r\n        lol = arg1 + arg2;\r\n    end\r\n\r\nby calling:\r\n\r\n    res = mlab.run_func('path/to/jk.m', {'arg1': 3, 'arg2': 5})\r\n    print res['result']\r\n\r\nwhich will print 8.\r\n\r\nOr you can run some arbitrary matlab code:\r\n\r\n    res = mlab.run_code('a=10; b=a+3')\r\n\r\nYou can shut down the MATLAB server by calling\r\n\r\n    mlab.stop()\r\n\r\nNB: you can call MATLAB code before the server starts by adding code to the ./matlab/startup.m file.\r\n\r\n\r\n### Matlab magic: \r\n\r\nThis can be used in an ipython session in the following manner:\r\n\r\n    import pymatbridge as pymat\r\n    ip = get_ipython()\r\n    pymat.load_ipython_extension(ip)\r\n\r\nThese lines will automatically start the matlab session for you. Then, you can\r\nsimply decorate a line/cell with the '%matlab' or '%%matlab' decorator and\r\nwrite matlab code:\r\n\r\n    %%matlab \r\n    a = linspace(0.01,6*pi,100);\r\n    plot(sin(a))\r\n    grid on\r\n    hold on\r\n    plot(cos(a),'r')\r\n\r\n### Warnings\r\n\r\nPython communicates with Matlab via an ad-hoc webserver. This is inherently\r\ninsecure, as the Matlab instance may be directed to perform arbitrary system\r\ncalls. There is no sandboxing of any kind. Use this code at your own risk.\r\n\r\n# Examples\r\n\r\nAn example MATLAB function and usage from Python is shown in test.py and test.m\r\nand there. Example notebooks are in the '.ipynb' files. \r\n\r\n\r\n","google":"UA-25254402-1","note":"Don't delete this file! It's used internally to help with page regeneration."}