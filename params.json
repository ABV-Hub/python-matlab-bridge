{"name":"Python-matlab-bridge","tagline":"A simple Python => MATLAB(R) interface and a matlab_magic for ipython","body":"# Python-MATLAB(R) Bridge and ipython matlab_magic\r\n\r\nA python interface to call out to [Matlab(R)](http://mathworks.com). Original\r\nimplementation by [Max Jaderberg](http://www.maxjaderberg.com/).\r\n\r\nThis implementation also includes an [IPython](http://ipython.org) `matlab_magic`\r\nextension, which provides a simple interface for weaving python and\r\nMatlab code together (requires ipython > 0.13).  \r\n\r\n\r\n## Installation\r\n\r\nPymatbridge communicates with Matlab using zeromq. So before installing\r\npymatbridge you must have [zmq](http://zeromq.org/intro:get-the-software)\r\nlibrary and [pyzmq](http://zeromq.org/bindings:python) installed on your\r\nmachine. If you intend to use the Matlab magic extension, you'll also need\r\n[IPython](http://ipython.org/install.html).  To make pymatbridge work properly,\r\nplease follow the following steps.\r\n\r\n### Install zmq library\r\nPlease refer to the [official guide](http://zeromq.org/intro:get-the-software) on how to\r\nbuild and install zmq. After zmq is installed, make sure you can find the location where\r\nlibzmq is installed. The library extension name and default location on different systems\r\nare listed below.\r\n\r\n| Platform      | library name  | Default locations                 |\r\n| ------------- | ------------- | --------------------------------- |\r\n| MacOS         | libzmq.dylib\t| /usr/lib or /usr/local/lib        |\r\n| Linux         | libzmq.so.3\t| /usr/lib or /usr/local/lib        |\r\n| Windows       | libzmq.dll    | C:\\Program Files\\ZeroMQ 3.2.4\\bin |\r\n\r\nIf you specified a prefix when installing zmq, the library file should be located at the\r\nsame prefix location.\r\n\r\nAfter the library file is located, you need to add it to dynamic loader path on your \r\nmachine. On MacOS, you can do this by adding the following line to your .bash_profile:\r\n\r\n\texport DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:<Path to your zmq lib directory>\r\n\r\nOn Linux, add the following line to your .bash_profile:\r\n\r\n\texport LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:<Path to your zmq lib directory>\r\n\r\nOn Windows, add the install location of libzmq.dll to the PATH environment variable.\r\nOn Windows 7+, typing \"environment variables\" into the start menu will bring up the\r\napporpriate Control Panel links.\r\n\t\r\n### Install pyzmq\r\nAfter step 1 is finished, please grab the latest version of \r\n[pyzmq](http://zeromq.org/bindings:python) and follow the instructions on the official \r\npage. Note that pymatbridge is developed with pyzmq 14.0.0 and older versions might not \r\nbe supported. If you have an old version of pyzmq, please update it. \r\n\r\n### Install pymatbridge\r\nAfter the steps above are done, you can install pymatbridge. Download the zip file of the \r\nlatest release. Unzip it somewhere on your machine and then issue:\r\n\r\n\tpython setup.py install\r\n\t\r\nThis should make the python-matlab-bridge import-able.\r\n\r\n\r\n## Usage\r\n\r\nTo use the pymatbridge you need to connect your python interperter to a Matlab\r\nsession. This is done in the following manner:\r\n\r\n    from pymatbridge import Matlab\r\n    mlab = Matlab()\r\n\r\nThis creates a matlab session class instance, into which you will be able to\r\ninject code and variables, and query for results. By default, when you use\r\n`start`, this will open whatever gets called when you type `matlab`\r\nin your Terminal, but you can also specify the location of your Matlab\r\napplication when initialzing your matlab session class:  \r\n\r\n    mlab = Matlab(matlab='/Applications/MATLAB_R2011a.app/bin/matlab')\r\n\t  \r\nYou can then start the Matlab server, which will kick off your matlab session,\r\nand create the connection between your Python interperter and this session:\r\n\r\n    mlab.start()\r\n\r\nwhich will return True once connected.\r\n\r\n    results = mlab.run_code('a=1;')\r\n\r\nShould now run that line of code and return a `results` dict into your Python\r\nnamespace. The `results` dict contains the following fields:\r\n\r\n    {u'content': {u'code': u'a=1',\r\n     u'datadir': u'/private/tmp/MatlabData/',\r\n     u'figures': [],\r\n     u'stdout': u'\\na =\\n\\n     1\\n\\n'},\r\n     u'success': u'true'}\r\n\r\nIn this case, the variable `a` is available on the Python side, by using\r\nthe `get_variable` method:\r\n\r\n    mlab.get_variable('a')\r\n \r\nYou can  run any MATLAB functions contained within a .m file of the\r\nsame name. For example, to call the function jk in jk.m:\r\n\r\n    %% MATLAB\r\n    function lol = jk(args)\r\n        arg1 = args.arg1;\r\n        arg2 = args.arg2;\r\n        lol = arg1 + arg2;\r\n    end\r\n\r\nyou would call:\r\n\r\n    res = mlab.run_func('path/to/jk.m', {'arg1': 3, 'arg2': 5})\r\n    print res['result']\r\n\r\nThis would print `8`.\r\n\r\nYou can shut down the MATLAB server by calling:\r\n\r\n    mlab.stop()\r\n\r\nTip: you can execute MATLAB code at the beginning of each of your matlab\r\nsessions by adding code to the `~/startup.m` file.\r\n\r\n\r\n### Matlab magic: \r\n\r\nThe Matlab magic allows you to use pymatbridge in the context of the IPython\r\nnotebook format.\r\n\r\n    %load_ext pymatbridge\r\n\r\nThese lines will automatically start the matlab session for you. Then, you can\r\nsimply decorate a line/cell with the '%matlab' or '%%matlab' decorator and\r\nwrite matlab code:\r\n\r\n    %%matlab \r\n    a = linspace(0.01,6*pi,100);\r\n    plot(sin(a))\r\n    grid on\r\n    hold on\r\n    plot(cos(a),'r')\r\n\r\nMore examples are provided in the `examples` directory\r\n    \r\n### Warnings\r\n\r\nPython communicates with Matlab via an ad-hoc zmq messenger. This is inherently\r\ninsecure, as the Matlab instance may be directed to perform arbitrary system\r\ncalls. There is no sandboxing of any kind. Use this code at your own risk.\r\n\r\n\r\n","google":"UA-40132410-1","note":"Don't delete this file! It's used internally to help with page regeneration."}